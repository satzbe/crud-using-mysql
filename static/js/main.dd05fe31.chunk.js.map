{"version":3,"sources":["App.js","index.js"],"names":["App","props","addRecord","Axios","post","name","state","password","then","setState","alert","getDatas","get","response","userdatas","data","editRecord","id","result","update","updateRecord","put","deleteRecord","delete","className","type","placeholder","value","this","onChange","e","target","onClick","map","val","key","Math","floor","random","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAyIeA,E,kDApIb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAWRC,UAAY,WACVC,IAAMC,KAAK,oDAAqD,CAC9DC,KAAM,EAAKC,MAAMD,KACjBE,SAAU,EAAKD,MAAMC,WACpBC,MAAK,WACN,EAAKC,SAAS,CAAEJ,KAAM,GAAIE,SAAU,KACpCG,MAAM,eAlBS,EAsBnBC,SAAW,WACTR,IAAMS,IAAI,mDAAmDJ,MAC3D,SAAAK,GACE,EAAKJ,SAAS,CAAEK,UAAWD,EAASE,WAzBvB,EA8BnBC,WAAa,SAAAC,GACXd,IAAMS,IAAN,0DAA6DK,IAAMT,MACjE,SAAAU,GACE,EAAKT,SAAS,CACZQ,GAAIA,EACJE,QAAQ,EACRd,KAAMa,EAAOH,KAAK,GAAGV,KACrBE,SAAUW,EAAOH,KAAK,GAAGR,eArCd,EA0CnBa,aAAe,WACbjB,IAAMkB,IAAI,oDAAqD,CAC7DJ,GAAI,EAAKX,MAAMW,GACfZ,KAAM,EAAKC,MAAMD,KACjBE,SAAU,EAAKD,MAAMC,WACpBC,MAAK,SAAAU,GACN,EAAKT,SAAS,CACZQ,GAAI,GACJE,QAAQ,EACRd,KAAM,GACNE,SAAU,KAEZG,MAAM,sBAtDS,EAyDnBY,aAAe,SAAAL,GACbd,IAAMoB,OAAN,4DACuDN,IACrDT,MAAK,SAAAK,GACL,EAAKJ,cAEPC,MAAM,iBA7DN,EAAKJ,MAAQ,CACXD,KAAM,GACNE,SAAU,GACVO,UAAW,GACXG,GAAI,GACJE,QAAQ,GAPO,E,0CAiEnB,WAAU,IAAD,OACP,OACE,sBAAKK,UAAU,YAAf,UACE,sDACA,sBAAKA,UAAU,QAAf,UACE,2CACA,uBACEC,KAAK,OACLC,YAAY,kBACZC,MAAOC,KAAKtB,MAAMD,KAClBwB,SAAU,SAAAC,GACR,EAAKrB,SAAS,CAAEJ,KAAMyB,EAAEC,OAAOJ,WAInC,+CACA,uBACEF,KAAK,OACLC,YAAY,WACZC,MAAOC,KAAKtB,MAAMC,SAClBsB,SAAU,SAAAC,GACR,EAAKrB,SAAS,CAAEF,SAAUuB,EAAEC,OAAOJ,YAGhB,IAAtBC,KAAKtB,MAAMa,OACV,wBAAQa,QAASJ,KAAKR,aAAtB,oBAEA,wBAAQY,QAASJ,KAAK1B,UAAtB,wBAGJ,qBAAKsB,UAAU,YAAf,SACE,wBAAQQ,QAASJ,KAAKjB,SAAtB,wBAEF,qBAAKa,UAAU,SAAf,SACGI,KAAKtB,MAAMQ,UAAUmB,KAAI,SAACC,EAAKC,GAC9B,OACE,sBAA0CX,UAAU,UAApD,UACE,0CAAaU,EAAIjB,MAEjB,4CAAeiB,EAAI7B,QAEnB,gDAAmB6B,EAAI3B,YAEvB,wBACEiB,UAAU,OACVQ,QAAS,WACP,EAAKhB,WAAWkB,EAAIjB,KAHxB,kBAQA,wBACEO,UAAU,SACVQ,QAAS,WACP,EAAKV,aAAaY,EAAIjB,KAH1B,sBAfQmB,KAAKC,MAAoB,IAAdD,KAAKE,qB,GAtGtBC,aCClBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.dd05fe31.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Axios from 'axios';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      password: '',\n      userdatas: [],\n      id: '',\n      update: false,\n    };\n  }\n\n  //add to records\n  addRecord = () => {\n    Axios.post('https://crud-app-using-mysql.herokuapp.com/create', {\n      name: this.state.name,\n      password: this.state.password,\n    }).then(() => {\n      this.setState({ name: '', password: '' });\n      alert('Success');\n    });\n  };\n  //show all data\n  getDatas = () => {\n    Axios.get('https://crud-app-using-mysql.herokuapp.com/view').then(\n      response => {\n        this.setState({ userdatas: response.data });\n      }\n    );\n  };\n  //edit\n  editRecord = id => {\n    Axios.get(`https://crud-app-using-mysql.herokuapp.com/view/${id}`).then(\n      result => {\n        this.setState({\n          id: id,\n          update: true,\n          name: result.data[0].name,\n          password: result.data[0].password,\n        });\n      }\n    );\n  };\n  updateRecord = () => {\n    Axios.put('https://crud-app-using-mysql.herokuapp.com/update', {\n      id: this.state.id,\n      name: this.state.name,\n      password: this.state.password,\n    }).then(result => {\n      this.setState({\n        id: '',\n        update: false,\n        name: '',\n        password: '',\n      });\n      alert('Values updated');\n    });\n  };\n  deleteRecord = id => {\n    Axios.delete(\n      `https://crud-app-using-mysql.herokuapp.com/delete/${id}`\n    ).then(response => {\n      this.setState();\n    });\n    alert('Data deleted');\n  };\n  render() {\n    return (\n      <div className='container'>\n        <h1>Crud App Using MYSQL</h1>\n        <div className='input'>\n          <label>Name: </label>\n          <input\n            type='text'\n            placeholder='Enter your name'\n            value={this.state.name}\n            onChange={e => {\n              this.setState({ name: e.target.value });\n            }}\n          />\n\n          <label>Password: </label>\n          <input\n            type='text'\n            placeholder='Password'\n            value={this.state.password}\n            onChange={e => {\n              this.setState({ password: e.target.value });\n            }}\n          />\n          {this.state.update === true ? (\n            <button onClick={this.updateRecord}>Update</button>\n          ) : (\n            <button onClick={this.addRecord}>Submit </button>\n          )}\n        </div>\n        <div className='show-data'>\n          <button onClick={this.getDatas}>Show all</button>\n        </div>\n        <div className='output'>\n          {this.state.userdatas.map((val, key) => {\n            return (\n              <div key={Math.floor(Math.random * 1000)} className='results'>\n                <label>Id : {val.id}</label>\n\n                <label>Name : {val.name}</label>\n\n                <label>Password : {val.password}</label>\n\n                <button\n                  className='edit'\n                  onClick={() => {\n                    this.editRecord(val.id);\n                  }}\n                >\n                  Edit\n                </button>\n                <button\n                  className='delete'\n                  onClick={() => {\n                    this.deleteRecord(val.id);\n                  }}\n                >\n                  Delete\n                </button>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}